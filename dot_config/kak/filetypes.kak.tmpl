# -----------------------------------------------------------------------------
# Filetypes configuration.
# -----------------------------------------------------------------------------

# Config for Go filetypes
hook global WinSetOption filetype=go %{
    # Use golangci-lint for linting
    set window lintcmd 'golangci-lint run'

    # LSP-related config
    lsp-enable-window
    set window lsp_auto_highlight_references true

    # Run goimports for formatting
    hook buffer BufWritePre .* %{
        try %{
            lsp-code-action-sync '^Organize Imports$'
        }
        lsp-formatting-sync
        lint
    }

    # Override References face
    set-face global Reference yellow+b
}

# Shell scripts
hook global WinSetOption filetype=sh %{
    # Use golangci-lint for linting
    set window lintcmd 'shellcheck -fgcc -Cnever'
    set window formatcmd 'shfmt -ci -i 2'

    # Format and lint on save
    hook buffer BufWritePre .* %{
        format
        lint
    }
}

{{if eq .work false}}
# WebAssembly Text files (just highlight as Lisp)
hook global BufCreate .*\.wat %{
   set buffer filetype lisp 
}
{{else}}
# Set bats (Bash unit-test) files to `sh` filetype
hook global BufCreate .*\.bats %{
    set buffer filetype sh
}

# Set mdx files to markdown filetype
hook global BufCreate .*\.mdx %{
	set buffer filetype markdown
}
{{end -}}

{{if (and (eq .os "darwin") (eq .chezmoi.arch "arm64")) }}
hook global WinSetOption filetype=zig %{
    set window formatcmd 'zig fmt --stdin'

    # LSP-related config
    lsp-enable-window
    set window lsp_auto_highlight_references true
    set-option global lsp_server_configuration zls.zig_lib_path="/opt/homebrew/Cellar/zig/0.9.1/lib/zig"
    set-option -add global lsp_server_configuration zls.warn_style=true

    # Run goimports for formatting
    hook buffer BufWritePre .* %{
        format-buffer
        # lint
    }

    # Override References face
    set-face global Reference yellow+b
}
{{end -}}
